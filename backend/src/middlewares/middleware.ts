import {
	RequestHandler,
	ErrorRequestHandler,
	Request,
	Response,
	NextFunction,
} from 'express';
import { RequestWithUser } from '../interfaces/request-with-user-and-session';

/* Middleware global (AGORA INCLUI A EXPOSI칂츾O DO CSRF TOKEN) */
export const middlewareGlobal: RequestHandler = (req, res, next) => {
	res.locals.csrfToken =
		typeof (req as any).csrfToken === 'function'
			? (req as any).csrfToken()
			: null;
	next();
};

/* Middleware CSRF (Fun칞칚o mantida, mas a l칩gica foi integrada ao middlewareGlobal) */
export const csrfMiddleware: RequestHandler = (req, res, next) => {
	res.locals.csrfToken =
		typeof (req as any).csrfToken === 'function'
			? (req as any).csrfToken()
			: null;
	next();
};

/* Middleware de autentica칞칚o */
export const authMiddleware: RequestHandler = (
	req: RequestWithUser,
	res: Response,
	next: NextFunction
) => {
	if (!req.session || !req.session.user?._id) {
		return res.status(401).json({ error: 'Usu치rio n칚o autenticado' });
	}
	next();
};

/* Middleware de erro (Tratamento restaurado) */
export const checkError: ErrorRequestHandler = (err, req, res, next) => {
	// 游뚿 A l칩gica CSRF foi restaurada para garantir resposta 403 JSON
	if (err?.code === 'EBADCSRFTOKEN') {
		return res.status(403).json({
			error: 'Opera칞칚o n칚o permitida. Token CSRF inv치lido ou ausente.',
		});
	}

	console.error(err);
	// Para todos os outros erros n칚o tratados, retorna um 500 gen칠rico.
	return res.status(500).json({ error: 'Erro interno do servidor' });
};

/* Middleware 404 */
export const check404: RequestHandler = (req, res, next) => {
	res.status(404).json({ error: 'A p치gina solicitada n칚o existe' });
};
